.. topics_followup:

===========
完成（？）
===========

单元测试（Unittest）
---------------------

* 基础：
    * 不同于功能测试或集成测试，单元测试每次只关注一小块功能的正确性，这样一个测试单元被称为测试用例（test case）；
    * 测试单元之间应该是相互独立的，不受彼此调用顺序的影响，一组相关的测试用例组成测试套件（test suite）；
    * 测试过程中可能需要创建临时文件、建立代理数据库或服务，这一系列相关的准备和清理工作，被称为test fixture；
    * unittest_
    * doctest

::

    import unittest
    from widgets import Widget

    class WidgetTestCase(unittest.TestCase):
        def setUp(self):
            self.widget = Widget('The widget')

        def test_default_widget_size(self):
            self.assertEqual(self.widget.size(), (50,50),
                             'incorrect default size')

        def test_widget_resize(self):
            self.widget.resize(100,150)
            self.assertEqual(self.widget.size(), (100,150),
                             'wrong size after resize')


    def suite():
        suite = unittest.TestSuite()
        suite.addTest(WidgetTestCase('test_default_widget_size'))
        suite.addTest(WidgetTestCase('test_widget_resize'))
        return suite

    if __name__ == '__main__':
        runner = unittest.TextTestRunner()
        runner.run(suite())



* 工具：
    * py.test_ : super straight forward
        * pytest-cov_ : unittest coverage report

::

    $py.test --cov=myproj tests/


::

    -------------------- coverage: platform linux2, python 2.6.4-final-0 ---------------------
    Name                 Stmts   Miss  Cover
    ----------------------------------------
    myproj/__init__          2      0   100%
    myproj/myproj          257     13    94%
    myproj/feature4286      94      7    92%
    ----------------------------------------
    TOTAL                  353     20    94%

*
    * mock_ : a library allows you to replace parts of your system under test with mock objects and make assertions about how they have been used. As of Python 3.3, it is available in the standard library.

::

    >>> from mock import MagicMock
    >>> thing = ProductionClass()
    >>> thing.method = MagicMock(return_value=3)
    >>> thing.method(3, 4, 5, key='value')
    3
    >>> thing.method.assert_called_with(3, 4, 5, key='value')

*
    * tox_: a tool to automate and standardize testing in Python. It is part of a larger vision of easing the packaging, testing and release process of Python software.
    .. image:: /ystatic/tox.png

::
    # content of: tox.ini , put in same dir as setup.py
    # generated by tox-quickstart
    [tox]
    envlist = py27,py36
    [testenv]
    deps=pytest       # install pytest in the venvs
    commands=pytest  # or 'nosetests' or ...

参考阅读：`Testing Your Code`_


-----------------------------------------------------

重构（Refactor）
------------------

*


-----------------------------------------------------

CI（Continuous Integration）
----------------------------

* packaging_

-----------------------------------------------------

文档（Documentation）
-----------------------

-----------------------------------------------------


.. _unittest: https://docs.python.org/3/library/unittest.html
.. _changes in python3: https://docs.python.org/3.0/whatsnew/3.0.html
.. _py.test: http://pytest.org/
.. _pytest-cov: https://pypi.python.org/pypi/pytest-cov/
.. _Testing Your Code: http://docs.python-guide.org/en/latest/writing/tests/
.. _mock: http://www.voidspace.org.uk/python/mock/
.. _tox: https://tox.readthedocs.io/en/latest/
.. _packaging: https://packaging.python.org/tutorials/distributing-packages/
